import io.github.davidmweber.FlywayPlugin.autoImport.flywayMigrate
import org.scalafmt.sbt.ScalafmtPlugin.autoImport.scalafmt
import sbt._
import sbt.Keys._

object Db {

  val slickGen: TaskKey[Seq[File]] =
    TaskKey[Seq[File]]( "slick-gen", "Generate slick bindings in kureuil-api" )

  val migrateDb: TaskKey[Seq[File]] =
    TaskKey[Seq[File]]( "migrate-db", "Apply Flyway migrations and generate slick bindings in kureuil-api" )

  val slickBindingsPath: SettingKey[File] =
    SettingKey[File]( "slick-bindings-path", "Path where slick bindings are generated" )

  val slickBindingsPackage: SettingKey[String] =
    SettingKey[String]( "slick-bindings-package", "Package to put the slick bindings in" )

  val slickCodegenArgs: TaskKey[String] =
    TaskKey[String]( "slick-codegen-args", "Args to kureuil-codegen" )

  val slickCodegenOutput: TaskKey[Seq[File]] =
    TaskKey[Seq[File]]( "slick-codegen-output", "Generated Slick bindings" )

  def slickCodeGenSettings = Seq(
    unmanagedSourceDirectories in Compile += slickBindingsPath.value,
    sourceDirectories in (Compile, scalafmt) += slickBindingsPath.value,
    slickCodegenArgs := {
      val tgt = slickBindingsPath.value
      val pkg = slickBindingsPackage.value
      " " + tgt + " " + pkg
    },
    slickCodegenOutput := {
      val tgt              = slickBindingsPath.value
      val pkg              = slickBindingsPackage.value
      val tablesFile: File = pkg.split( '.' ).foldLeft( tgt )( _ / _ ) / "Tables.scala"
      Seq( tablesFile )
    }
  )

  def tasksSettings( codegen: Project, migrations: Project ) = Seq(
    slickGen := Def.taskDyn {
      println( "Start slick-gen task" )
      val args = Db.slickCodegenArgs.value
      val out  = Db.slickCodegenOutput.value
      (run in Compile in codegen)
        .toTask( args )
        .map( _ => {
          println( s"Files generated by slick-gen: ${out.mkString( ", " )}" )
          out
        } )
    }.value,
    migrateDb := Def.taskDyn {
      val res = Def.task {
        val c = (copyResources in migrations in Compile).value
        println( "Prepared migration files" )
        c
      }.value
      val () = (flywayMigrate in migrations).value
      Def.task( Db.slickGen.value )
    }.value
  )

}
